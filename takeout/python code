import numpy as np 
import cv2
import serial #导入模块
import serial.tools.list_ports
import time
import os
import random
from urllib.request import urlopen
import re
from bs4 import BeautifulSoup
from selenium import webdriver

#
subjects = ["", "qitian", "yuchen"]
face_cascade = cv2.CascadeClassifier('haarcascade_frontalface_default.xml') 
eye_cascade = cv2.CascadeClassifier('haarcascade_eye.xml')
cap = cv2.VideoCapture(0)
count = 0
browser = webdriver.Chrome()
url = 'http://i.meituan.com/account/?cevent=imt%2Fhomepage%2Fmine'
#

browser.get(url)


ports = list(serial.tools.list_ports.comports())
print (ports)
for p in ports:
    print (p[1])
    if "SERIAL" in p[1] or"UART" in p[1] or "Arduino" in p[1] :
	    ser=serial.Serial(port=p[0])
	    break
    else :
	    print ("No Arduino Device was found connected to the computer")

#img = cv2.imread('face.jpg')

#gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)

#var = (w - x) * (y - h)

def detect_face(img):
    #convert the test image to gray image as opencv face detector expects gray images
    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
    
    #load OpenCV face detector, I am using LBP which is fast
    #there is also a more accurate but slow Haar classifier
    face_cascade = cv2.CascadeClassifier('opencv-files/lbpcascade_frontalface.xml')

    #let's detect multiscale (some images may be closer to camera than others) images
    #result is a list of faces
    faces = face_cascade.detectMultiScale(gray, scaleFactor=1.2, minNeighbors=5);
    
    #if no faces are detected then return original img
    if (len(faces) == 0):
        return None, None
    
    #under the assumption that there will be only one face,
    #extract the face area
    (x, y, w, h) = faces[0]
    
    #return only the face part of the image
    return gray[y:y+w, x:x+h], faces[0]

def draw_rectangle(img, rect):
    (x, y, w, h) = rect
    cv2.rectangle(img, (x, y), (x+w, y+h), (0, 255, 0), 2)
    
#function to draw text on give image starting from
#passed (x, y) coordinates. 
def draw_text(img, text, x, y):
    cv2.putText(img, text, (x, y), cv2.FONT_HERSHEY_PLAIN, 1.5, (0, 255, 0), 2)

def prepare_training_data(data_folder_path):
    
    #------STEP-1--------
    #get the directories (one directory for each subject) in data folder
    dirs = os.listdir(data_folder_path)
    
    #list to hold all subject faces
    faces = []
    #list to hold labels for all subjects
    labels = []
    
    #let's go through each directory and read images within it
    for dir_name in dirs:
        
        #our subject directories start with letter 's' so
        #ignore any non-relevant directories if any
        if not dir_name.startswith("s"):
            continue;
            
        #------STEP-2--------
        #extract label number of subject from dir_name
        #format of dir name = slabel
        #, so removing letter 's' from dir_name will give us label
        label = int(dir_name.replace("s", ""))
        
        #build path of directory containin images for current subject subject
        #sample subject_dir_path = "training-data/s1"
        subject_dir_path = data_folder_path + "/" + dir_name
        
        #get the images names that are inside the given subject directory
        subject_images_names = os.listdir(subject_dir_path)
        
        #------STEP-3--------
        #go through each image name, read image, 
        #detect face and add face to list of faces
        for image_name in subject_images_names:
            
            #ignore system files like .DS_Store
            if image_name.startswith("."):
                continue;
            
            #build image path
            #sample image path = training-data/s1/1.pgm
            image_path = subject_dir_path + "/" + image_name

            #read image
            image = cv2.imread(image_path)
            
            #display an image window to show the image 
            cv2.imshow("Training on image...", cv2.resize(image, (400, 500)))
            cv2.waitKey(100)
            
            #detect face
            face, rect = detect_face(image)
            
            #------STEP-4--------
            #for the purpose of this tutorial
            #we will ignore faces that are not detected
            if face is not None:
                #add face to list of faces
                faces.append(face)
                #add label for this face
                labels.append(label)


def predict(test_img):
    global familyID
    #make a copy of the image as we don't want to chang original image
    img = test_img.copy()
    #detect face from the image
    cv2.imshow("imgface",img)
    cv2.waitKey(1000)
    face, rect = detect_face(img)
    if face is None :
        print("对不起，没有识别到人脸")
        return img;

    cv2.imshow("face",face)
    cv2.waitKey(1000)
    cv2.destroyAllWindows()

    #predict the image using our face recognizer 
    label, confidence = face_recognizer.predict(face)
    print("label,confidence",label,confidence)
    #get name of respective label returned by face recognizer
    label_text = subjects[label]
    familyID=label
    
    #draw a rectangle around face detected
    draw_rectangle(img, rect)
    #draw name of predicted person
    draw_text(img, label_text, rect[0], rect[1]-5)
    return img


'''   
for i in range(20):
    i = str(i)
    print(i)
    ser.write(i.encode())
    time.sleep(10)
'''
faces, labels = prepare_training_data("training-data")
print("Data prepared")

#print total faces and labels
print("Total faces: ", len(faces))
print("Total labels: ", len(labels))




while True:
    #settings
    ret, frame = cap.read() 
    face,rect=detect_face(frame)
    frame = cv2.resize(frame,(600,400),interpolation=cv2.INTER_LINEAR)
    #gray = cv2.cvtColor(frame,cv2.COLOR_BGR2GRAY) 
    faces = face_cascade.detectMultiScale(frame, 1.3, 5)
    #set counter and counter cycle
    count += 1
    if count > 30:
        count = 0
    #positiion of the face
    for (x,y,w,h) in faces:
        img = cv2.rectangle(frame,(x,y),(x+w,y+h),(255,0,0),2)
        roi_gray = frame[y:y+h,x:x+w]
        roi_color = img[y:y+h,x:x+w]
        var1 = str(int((x/600)*180))
        print(var1)
        if count == 0:
            ser.write(var1.encode())
    #display 
    cv2.imshow('frame',frame)  
    #compare photo 
    if face is not None:
        cv2.imwrite("test-data/face.jpg",frame)
        cv2.imshow("face-detected",face)
        draw_rectangle(frame, rect)
        cv2.waitKey(2000)
        break   
    if cv2.waitKey(1) & 0xFF == ord('q'): 
        break

#load test images
test_img1 = cv2.imread("test-data/face.jpg")

predicted_img1 = predict(test_img1)
print("Prediction complete")

#display both images
cv2.imshow(subjects[1], cv2.resize(predicted_img1, (400, 500)))


cap.release()
cv2.destroyAllWindows()

# 爬虫
from selenium import webdriver
import time
browser = webdriver.Chrome()
xpath_login = '//*[@id="normal-login-form"]/div[1]/button'
url = 'https://www.ele.me/profile/'
browser.get(url)
time.sleep(3)
input('')
browser.find_element_by_xpath('/html/body/div/div/div/div[1]/span/a[1]').click()
infor = browser.find_element_by_xpath("/html/body/div[4]/div/div[2]/div/div[1]/div[2]/a/p[2]")
print(infor.text)#input.text文本值

