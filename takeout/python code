import numpy as np 
import cv2
import serial #导入模块
import serial.tools.list_ports
import time

ports = list(serial.tools.list_ports.comports())
print (ports)
for p in ports:
    print (p[1])
    if "SERIAL" in p[1] or"UART" in p[1] or "Arduino" in p[1] :
	    ser=serial.Serial(port=p[0])
	    break
    else :
	    print ("No Arduino Device was found connected to the computer")
face_cascade = cv2.CascadeClassifier('haarcascade_frontalface_default.xml') 
eye_cascade = cv2.CascadeClassifier('haarcascade_eye.xml')

cap = cv2.VideoCapture(0)
#img = cv2.imread('face.jpg')

#gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)

#var = (w - x) * (y - h)


'''  
def send():
    #action = input()
    
    if x + w/2 >= 200:
        ser.write('1'.encode())
    elif x + w/2 < 200: 
        ser.write('2'.encode())
    
    if action == '1':
        ser.write('1'.encode())
'''
'''   
for i in range(20):
    i = str(i)
    print(i)
    ser.write(i.encode())
    time.sleep(10)
'''
count = 0
while True:
    count += 1
    if count > 30:
        count = 0
    ret, frame = cap.read() 
    frame = cv2.resize(frame,(600,400),interpolation=cv2.INTER_LINEAR)
    #gray = cv2.cvtColor(frame,cv2.COLOR_BGR2GRAY) 
    faces = face_cascade.detectMultiScale(frame, 1.3, 5)
    for (x,y,w,h) in faces:
        img = cv2.rectangle(frame,(x,y),(x+w,y+h),(255,0,0),2)
        roi_gray = frame[y:y+h,x:x+w]
        roi_color = img[y:y+h,x:x+w]
        var1 = str(int((x/600)*180))
        print(var1)
        if count == 0:
            ser.write(var1.encode())
    cv2.imshow('frame',frame)   
    if cv2.waitKey(1) & 0xFF == ord('q'): 
        break
    

cap.release()
cv2.destroyAllWindows()
